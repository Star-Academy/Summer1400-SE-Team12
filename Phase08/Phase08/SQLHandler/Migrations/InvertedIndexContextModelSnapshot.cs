// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SQLHandler;

namespace SQLHandler.Migrations
{
    [DbContext(typeof(InvertedIndexContext))]
    partial class InvertedIndexContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "6.0.0-preview.5.21301.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DocumentWord", b =>
                {
                    b.Property<string>("DocsCollectionDocName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("wordsCollectioneachWord")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("DocsCollectionDocName", "wordsCollectioneachWord");

                    b.HasIndex("wordsCollectioneachWord");

                    b.ToTable("DocumentWord");
                });

            modelBuilder.Entity("SQLHandler.Document", b =>
                {
                    b.Property<string>("DocName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DocContents")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocName");

                    b.ToTable("DocumentsDbContext");
                });

            modelBuilder.Entity("SQLHandler.Word", b =>
                {
                    b.Property<string>("eachWord")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("eachWord");

                    b.ToTable("WordsDbContext");
                });

            modelBuilder.Entity("DocumentWord", b =>
                {
                    b.HasOne("SQLHandler.Document", null)
                        .WithMany()
                        .HasForeignKey("DocsCollectionDocName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SQLHandler.Word", null)
                        .WithMany()
                        .HasForeignKey("wordsCollectioneachWord")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
